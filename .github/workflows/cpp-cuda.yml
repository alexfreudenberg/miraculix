name: C/C++/CUDA CI

on:
  pull_request:
    branches: 
    - '**'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Install Intel oneAPI
      run: |
        wget -O- https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB \
        | gpg --dearmor | sudo tee /usr/share/keyrings/oneapi-archive-keyring.gpg > /dev/null
        echo "deb [signed-by=/usr/share/keyrings/oneapi-archive-keyring.gpg] https://apt.repos.intel.com/oneapi all main" | sudo tee /etc/apt/sources.list.d/oneAPI.list
        sudo apt update
        sudo apt-get install -y intel-oneapi-dpcpp-cpp-compiler
        . /opt/intel/oneapi/setvars.sh        
         if which icc > /dev/null; then
          echo "icc is in the PATH"
        else
          echo "icc is not in the PATH"
        fi
        
    - name: cuda-toolkit
      uses: Jimver/cuda-toolkit@v0.2.10
      with:
        # Cuda version
        cuda: 11.7.0 # optional, default is 12.1.0
        # Only installs specified subpackages, must be in the form of a JSON array. For example, if you only want to install nvcc and visual studio integration: ["nvcc", "visual_studio_integration"] double quotes required! Note that if you want to use this on Linux, 'network' method MUST be used.
        #sub-packages: '["nvcc"]' # optional, default is []
        # Installation method, can be either 'local' or 'network'. 'local' downloads the entire installer with all packages and runs that (you can still only install certain packages with sub-packages on Windows). 'network' downloads a smaller executable which only downloads necessary packages which you can define in subPackages
        #method: 'network' # optional, default is local
        # (Linux and 'local' method only) override arguments for the linux .run installer. For example if you don't want samples use ["--toolkit"] double quotes required!
        linux-local-args: '["--toolkit"]' # optional, default is ["--toolkit", "--samples"]
        # Use GitHub cache to cache downloaded installer on GitHub servers
        #use-github-cache: # optional, default is true
    - name: make
      run: export "CUDA_HOME=$CUDA_PATH/" && echo "This $CUDA_HOME" && make -C src
